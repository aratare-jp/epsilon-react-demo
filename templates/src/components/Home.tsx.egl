[%	var CaseUtils = Native("org.apache.commons.text.CaseUtils"); %]
import {Layout, Menu} from 'antd';
import {PieChartOutlined, UserOutlined, BookOutlined} from '@ant-design/icons';
import React, {useState} from "react";
import {Link, Redirect, Route, Switch, useLocation, useRouteMatch} from "react-router-dom";
import Main from "./Main";
[%	for (entity in t_entity) {
        var pascalCase = CaseUtils.toCamelCase(entity.a_name, true, null); %]
import [%= pascalCase %] from "./entities/[%= pascalCase %]";
[%	} %]

[%= startProtected(out, "//", "Add custom imports here", false, "") %]
[%= endProtected(out) %]

const {Sider} = Layout;
const {SubMenu} = Menu;

export default function Home() {
    [%= startProtected(out, "//", "Add custom code before the main body here", false, "") %]
    [%= endProtected(out) %]

    const {path, url} = useRouteMatch();
    const location = useLocation<Location>();
    const [collapsed, setCollapsed] = useState<boolean>(false);
    const [selectedKey, setSelectedKey] = useState<string>(location.pathname);

    [%= startProtected(out, "//", "Add custom logic when collapsing the sidebar here", false, "") %]
    const onCollapse = (collapsed: boolean) => {
        setCollapsed(collapsed);
    };
    [%= endProtected(out) %]

    [%= startProtected(out, "//", "Add custom logic when clicking on the menus in the sidebar here", false, "") %]
    const onMenuClicked = (e: any) => {
        setSelectedKey(e.key);
    }
    [%= endProtected(out) %]

    [%= startProtected(out, "//", "Add custom rendering code here", false, "") %]
    return (
        <Layout style={{minHeight: '100vh'}}>
            <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>
                <div className="logo"/>
                <Menu
                    theme="dark"
                    defaultSelectedKeys={[selectedKey]}
                    mode="inline"
                    onClick={onMenuClicked}
                    defaultOpenKeys={[`${url}/entities`]}
                >
                    <Menu.Item key={url} icon={<PieChartOutlined/>}>
                        <Link to={url}>Home</Link>
                    </Menu.Item>
                    <SubMenu key={`${url}/entities`} icon={<UserOutlined/>} title="Entities">
                        [%	for (entity in t_entity) {
                                var camelCase = CaseUtils.toCamelCase(entity.a_name, false, null);
                                var pascalCase = CaseUtils.toCamelCase(entity.a_name, true, null); %]
                        <Menu.Item key={`${url}/entities/[%= camelCase %]`}>
                            <Link to={`${url}/entities/[%= camelCase %]`}>[%= entity.a_name %]</Link>
                        </Menu.Item>
                        [%	} %]
                    </SubMenu>
                </Menu>
            </Sider>
            <Switch>
                [%	for (entity in t_entity) {
                        var camelCase = CaseUtils.toCamelCase(entity.a_name, false, null);
                        var pascalCase = CaseUtils.toCamelCase(entity.a_name, true, null); %]
                <Route path={`${path}/entities/[%= camelCase %]`}>
                    <[%= pascalCase %]/>
                </Route>
                [%	} %]
                <Route exact path={path}>
                    <Main/>
                </Route>
                <Route path="/"
                       render={({location}: any) => (
                           <Redirect to={{
                               pathname: "/404",
                               state: {from: location}
                           }}/>
                       )}/>
            </Switch>
        </Layout>
    );
    [%= endProtected(out) %]
}
